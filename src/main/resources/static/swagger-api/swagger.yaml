openapi: 3.0.0
info:
  title: "FlowerStore-ecommerce"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
  - url: "https://flowerstore-api.herokuapp.com"

tags:
  - name: "AdminController"
  - name: "AuthenticationController"
  - name: "FlowerController"
  - name: "RegistrationController"
  - name: "UserController"

paths:
  /api/v1/admin/add:
    post:
      tags:
        - "AdminController"
      summary: "Add a flower to database"
      operationId: "addFlower"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                flowerName:
                  type: string
                category:
                  type: string
                color:
                  type: string
                originCountry:
                  type: string
                description:
                  type: string
                imageFilename:
                  type: string
                price:
                  type: integer
                availability:
                  type: boolean
                flowerRating:
                  type: number
                  format: double
              required:
                - flowerName
                - category
                - color
                - originCountry
                - price
      responses:
        "200":
          description: "Flower added successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullFlowerResponse"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowerError"
      security:
        - token: []

  /api/v1/admin/edit:
    post:
      tags:
        - "AdminController"
      summary: "Update flower details"
      operationId: "updateFlower"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                flowerName:
                  type: string
                category:
                  type: string
                color:
                  type: string
                originCountry:
                  type: string
                description:
                  type: string
                imageFilename:
                  type: string
                price:
                  type: integer
                availability:
                  type: boolean
                flowerRating:
                  type: number
                  format: double
              required:
                - flowerName
                - category
                - color
                - originCountry
                - price
      responses:
        "200":
          description: "Flower updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullFlowerResponse"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowerError"
      security:
        - token: []

  /api/v1/admin/delete/{id}:
    delete:
      tags:
        - "AdminController"
      summary: "Delete flower by id"
      operationId: "deleteFlower"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Flower deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Flower deleted successfully"
        "404":
          description: "Flower not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Flower not found."
      security:
        - token: []

  /api/v1/admin/orders:
    get:
      tags:
        - "AdminController"
      summary: "Get all orders"
      operationId: "getAllOrders"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"
      security:
        - token: []

  /api/v1/admin/order/{email}:
    get:
      tags:
        - "AdminController"
      summary: "Get orders by user email"
      operationId: "getUserOrdersByEmail"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"
      security:
        - token: []

  /api/v1/auth/login:
    post:
      tags:
        - "AuthenticationController"
      summary: "Login to the system"
      operationId: "login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test123@test.com"
                password:
                  type: string
                  example: "1234567890"
      responses:
        "200":
          description: "Authentication successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Incorrect password or email"

  /api/v1/auth/forgot/{email}:
    get:
      tags:
        - "AuthenticationController"
      summary: "Send password reset code to email"
      operationId: "forgotPassword"
      parameters:
        - name: "email"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Reset code sent"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Reset password code is sent to your email"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Email not found"

  /api/v1/auth/reset/{code}:
    get:
      tags:
        - "AuthenticationController"
      summary: "Get email using password reset code"
      operationId: "getPasswordResetCode"
      parameters:
        - name: "code"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "test@test.com"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Password reset code is invalid!"

  /api/v1/auth/reset:
    post:
      tags:
        - "AuthenticationController"
      summary: "Reset password"
      operationId: "passwordReset"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test@test.com"
                password:
                  type: string
                  example: "1234567890"
                password2:
                  type: string
                  example: "1234567890"
      responses:
        "200":
          description: "Password reset successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Password successfully changed!"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  passwordError:
                    type: string
                  password2Error:
                    type: string

  /api/v1/registration:
    post:
      tags:
        - "RegistrationController"
      summary: "User registration"
      operationId: "registration"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test1234@test.com"
                password:
                  type: string
                  example: "1234567890"
                password2:
                  type: string
                  example: "1234567890"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                captcha:
                  type: string
      responses:
        "200":
          description: "User registered successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "User successfully registered."
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  passwordError:
                    type: string
                  password2Error:
                    type: string

  /api/v1/registration/activate/{code}:
    get:
      tags:
        - "RegistrationController"
      summary: "Activate user registration via email code"
      operationId: "activateEmailCode"
      parameters:
        - name: "code"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User activated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "User successfully activated."
        "404":
          description: "Activation code not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Activation code not found."

  /api/v1/flowers:
    get:
      tags:
        - "FlowerController"
      summary: "Retrieve all flowers"
      operationId: "getAllFlowers"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowerResponse"

  /api/v1/flowers/{id}:
    get:
      tags:
        - "FlowerController"
      summary: "Get flower by id"
      operationId: "getFlower"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullFlowerResponse"
        "404":
          description: "Flower not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Flower not found."

  /api/v1/flowers/reviews/{id}:
    get:
      tags:
        - "FlowerController"
      summary: "Get reviews by flower id"
      operationId: "getReviewsByFlowerId"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewResponse"
        "404":
          description: "Flower not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Flower not found."

  /api/v1/users/info:
    get:
      tags:
        - "UserController"
      summary: "Get authenticated user info"
      operationId: "getUserInfo"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User not found"
      security:
        - token: []

  /api/v1/users/edit:
    put:
      tags:
        - "UserController"
      summary: "Edit authenticated user info"
      operationId: "updateUserInfo"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                city:
                  type: string
                address:
                  type: string
                phoneNumber:
                  type: string
                postIndex:
                  type: string
              required:
                - firstName
                - lastName
      responses:
        "200":
          description: "User info updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstNameError:
                    type: string
                  lastNameError:
                    type: string
      security:
        - token: []

  /api/v1/users/cart:
    post:
      tags:
        - "UserController"
      summary: "Get flowers for shopping cart by ids"
      operationId: "getCart"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              example: [1, 2, 3]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowerResponse"

  /api/v1/users/order/{orderId}:
    get:
      tags:
        - "UserController"
      summary: "Get order by id"
      operationId: "getOrderById"
      parameters:
        - name: "orderId"
          in: "path"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "404":
          description: "Order not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Order not found."
      security:
        - token: []

  /api/v1/users/order:
    post:
      tags:
        - "UserController"
      summary: "Place a new order"
      operationId: "postOrder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalPrice:
                  type: number
                  format: double
                firstName:
                  type: string
                lastName:
                  type: string
                city:
                  type: string
                address:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                postIndex:
                  type: integer
                flowersId:
                  type: object
                  additionalProperties:
                    type: integer
              required:
                - firstName
                - lastName
                - city
                - address
                - email
                - phoneNumber
                - postIndex
      responses:
        "200":
          description: "Order placed successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstNameError:
                    type: string
                  lastNameError:
                    type: string
                  cityError:
                    type: string
                  addressError:
                    type: string
                  emailError:
                    type: string
                  phoneNumberError:
                    type: string
                  postIndexError:
                    type: string
      security:
        - token: []

  /api/v1/users/review:
    post:
      tags:
        - "UserController"
      summary: "Add a review for a flower"
      operationId: "addReviewToFlower"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowerId:
                  type: integer
                  format: int64
                author:
                  type: string
                message:
                  type: string
              required:
                - flowerId
                - author
                - message
      responses:
        "200":
          description: "Review added successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Review added successfully."
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorError:
                    type: string
                  messageError:
                    type: string
      security:
        - token: []

components:
  securitySchemes:
    token:
      type: apiKey
      name: Authorization
      in: header

  schemas:
    FullFlowerResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        flowerName:
          type: string
          example: "Rose Bouquet"
        category:
          type: string
          example: "Bouquet"
        color:
          type: string
          example: "Red"
        originCountry:
          type: string
          example: "Netherlands"
        description:
          type: string
          example: "Fresh red roses."
        imageFilename:
          type: string
          example: "rose_bouquet.jpg"
        price:
          type: integer
          example: 25
        availability:
          type: boolean
          example: true
        flowerRating:
          type: number
          format: double
          example: 4.5
    FlowerResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        flowerName:
          type: string
          example: "Rose Bouquet"
        price:
          type: integer
          example: 25
        imageFilename:
          type: string
          example: "rose_bouquet.jpg"
    FlowerError:
      type: object
      properties:
        flowerNameError:
          type: string
          example: "Fill in the input field"
        categoryError:
          type: string
          example: "Fill in the input field"
        colorError:
          type: string
          example: "Fill in the input field"
        originCountryError:
          type: string
          example: "Fill in the input field"
        priceError:
          type: string
          example: "Fill in the input field"
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        totalPrice:
          type: number
          format: double
          example: 100.0
        date:
          type: string
          example: "2021-04-07"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        city:
          type: string
          example: "New York"
        address:
          type: string
          example: "Wall Street 1"
        email:
          type: string
          example: "test@test.com"
        phoneNumber:
          type: string
          example: "123456"
        postIndex:
          type: integer
          format: int32
          example: 123456
    OrderItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        amount:
          type: integer
          example: 100
        quantity:
          type: integer
          example: 2
        flower:
          $ref: "#/components/schemas/FlowerResponse"
    AuthenticationResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1Ni..."
    BaseUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        email:
          type: string
          example: "test123@test.com"
        firstName:
          type: string
          example: "John"
        roles:
          type: array
          items:
            type: string
          example:
            - "USER"
        provider:
          type: string
          example: "LOCAL"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        email:
          type: string
          example: "test123@test.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        city:
          type: string
          example: "New York"
        address:
          type: string
          example: "Wall Street 1"
        phoneNumber:
          type: string
          example: "123456"
        postIndex:
          type: string
          example: "123456"
        provider:
          type: string
          example: "LOCAL"
        roles:
          type: array
          items:
            type: string
          example:
            - "USER"
